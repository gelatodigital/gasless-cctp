{
  "address": "0x4ACE92Ed3B003AbB165f7d15eec744baD8c905e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEIP3009Token",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract ITokenMessenger",
          "name": "_tokenMessenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "validAfter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validBefore",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct Authorization",
          "name": "authorization",
          "type": "tuple"
        }
      ],
      "name": "DepositForBurn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_srcMaxFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstMaxFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_dstDomain",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "validAfter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validBefore",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Authorization",
          "name": "_srcAuthorization",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "validAfter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validBefore",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Authorization",
          "name": "_dstAuthorization",
          "type": "tuple"
        }
      ],
      "name": "depositForBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IEIP3009Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenMessenger",
      "outputs": [
        {
          "internalType": "contract ITokenMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x32b400002a688a83cf8ac22bd906d643bb5ba3c00298712225fe0bde11efb3b2",
  "receipt": {
    "to": null,
    "from": "0x92e94967A976610D27267273935De71B791f0037",
    "contractAddress": "0x4ACE92Ed3B003AbB165f7d15eec744baD8c905e0",
    "transactionIndex": 1,
    "gasUsed": "5308702",
    "logsBloom": "0x
    "blockHash": "0x945efe655b5a5c5b8261e60ab2a7fa1d6fe05035ef8a9404a15f6f29530e8444",
    "transactionHash": "0x32b400002a688a83cf8ac22bd906d643bb5ba3c00298712225fe0bde11efb3b2",
    "logs": [],
    "blockNumber": 128028802,
    "cumulativeGasUsed": "5308702",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0x19330d10D9Cc8751218eaf51E8885D058642E08A"
  ],
  "numDeployments": 1,
  "solcInputHash": "5cbc602854c96b59cda7de3ca4afe23d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEIP3009Token\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMessenger\",\"name\":\"_tokenMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct Authorization\",\"name\":\"authorization\",\"type\":\"tuple\"}],\"name\":\"DepositForBurn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcMaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstMaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_dstDomain\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Authorization\",\"name\":\"_srcAuthorization\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Authorization\",\"name\":\"_dstAuthorization\",\"type\":\"tuple\"}],\"name\":\"depositForBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IEIP3009Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMessenger\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoCCTPSender.sol\":\"GelatoCCTPSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayERC2771Base} from \\\"./base/GelatoRelayERC2771Base.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 92; // offset: address + address + uint256 + address\\nuint256 constant _FEE_TOKEN_START = 72; // offset: address + uint256 + address\\nuint256 constant _FEE_START = 52; // offset: uint256 + address\\nuint256 constant _MSG_SENDER_START = 20; // offset: address\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContextERC2771()\\n    pure\\n    returns (address feeCollector)\\n{\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\\n    assembly {\\n        _msgSender := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken, fee, _msgSender appended to msg.data\\n * Expects calldata encoding:\\n    abi.encodePacked(\\n        _data,\\n        _feeCollector,\\n        _feeToken,\\n        _fee,\\n        _msgSender\\n    );\\n * Therefore, we're expecting 20 + 20 + 32 + 20 = 92 bytes to be appended to normal msgData\\n *     feeCollector: - 92 bytes\\n *     feeToken: - 72 bytes\\n *     fee: - 52 bytes\\n *     _msgSender: - 20 bytes\\n */\\n\\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\\nabstract contract GelatoRelayContextERC2771 is GelatoRelayERC2771Base {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view virtual returns (bytes calldata) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    function _getMsgSender() internal view virtual returns (address) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? _getMsgSenderRelayContextERC2771()\\n                : msg.sender;\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContextERC2771();\\n    }\\n}\\n\",\"keccak256\":\"0xeb307636deb9edfcc1a62ec1984c0549e611e664ca4d2df14fdb8776aa748814\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GELATO_RELAY_ERC2771,\\n    GELATO_RELAY_CONCURRENT_ERC2771,\\n    GELATO_RELAY_ERC2771_ZKSYNC,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayERC2771Base {\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // Use another address on zkSync\\n        if (block.chainid == 324 || block.chainid == 280) {\\n            return (_forwarder == GELATO_RELAY_ERC2771_ZKSYNC ||\\n                _forwarder == GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC);\\n        }\\n        return (_forwarder == GELATO_RELAY_ERC2771 ||\\n            _forwarder == GELATO_RELAY_CONCURRENT_ERC2771);\\n    }\\n}\\n\",\"keccak256\":\"0x246a6118801ef8095aa202daa0d2558f278207bebcaccbb4822dbcf3c3170a3a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\\n\\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\\n\",\"keccak256\":\"0x2235b1c6cf1f9b559ac882f80153f7dd97648780b98dd93370c901ad522dcb11\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x4507d23bf0b68cb763aec3e483d677fe59cd963de90f3a27958ceb960e0157df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/GelatoCCTPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {\\r\\n    GelatoRelayContextERC2771\\r\\n} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\\\";\\r\\nimport {ITokenMessenger} from \\\"./interfaces/ITokenMessenger.sol\\\";\\r\\nimport {IEIP3009Token} from \\\"./interfaces/IEIP3009Token.sol\\\";\\r\\nimport {Authorization} from \\\"./types/Authorization.sol\\\";\\r\\n\\r\\ncontract GelatoCCTPSender is GelatoRelayContextERC2771 {\\r\\n    IEIP3009Token public immutable token;\\r\\n    ITokenMessenger public immutable tokenMessenger;\\r\\n\\r\\n    event DepositForBurn(\\r\\n        address owner,\\r\\n        uint256 maxFee,\\r\\n        uint32 domain,\\r\\n        Authorization authorization\\r\\n    );\\r\\n\\r\\n    constructor(IEIP3009Token _token, ITokenMessenger _tokenMessenger) {\\r\\n        token = _token;\\r\\n        tokenMessenger = _tokenMessenger;\\r\\n    }\\r\\n\\r\\n    function depositForBurn(\\r\\n        uint256 _value,\\r\\n        uint256 _srcMaxFee,\\r\\n        uint256 _dstMaxFee,\\r\\n        uint32 _dstDomain,\\r\\n        Authorization calldata _srcAuthorization,\\r\\n        Authorization calldata _dstAuthorization\\r\\n    ) external onlyGelatoRelayERC2771 {\\r\\n        address owner = _getMsgSender();\\r\\n\\r\\n        token.receiveWithAuthorization(\\r\\n            owner,\\r\\n            address(this),\\r\\n            _value,\\r\\n            _srcAuthorization.validAfter,\\r\\n            _srcAuthorization.validBefore,\\r\\n            _srcAuthorization.nonce,\\r\\n            _srcAuthorization.v,\\r\\n            _srcAuthorization.r,\\r\\n            _srcAuthorization.s\\r\\n        );\\r\\n\\r\\n        _transferRelayFeeCapped(_srcMaxFee);\\r\\n\\r\\n        uint256 remaining = _value - _getFee();\\r\\n        token.approve(address(tokenMessenger), remaining);\\r\\n\\r\\n        tokenMessenger.depositForBurn(\\r\\n            remaining,\\r\\n            _dstDomain,\\r\\n            _addressToBytes32(owner),\\r\\n            address(token)\\r\\n        );\\r\\n\\r\\n        emit DepositForBurn(\\r\\n            owner,\\r\\n            _dstMaxFee,\\r\\n            _dstDomain,\\r\\n            _dstAuthorization\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(addr)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x19a37bb6e03d07e2297656e84341c1ccba1ba6a046a8e49ee2fbc8fb1d94a1c2\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP3009Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IEIP3009Token is IERC20 {\\r\\n    function receiveWithAuthorization(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        uint256 validAfter,\\r\\n        uint256 validBefore,\\r\\n        bytes32 nonce,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb7e5f92aec4cfb8afd6b795fb3777dc4793c7366eefd1d4b4c1fb9ec3b70d290\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface ITokenMessenger {\\r\\n    function depositForBurn(\\r\\n        uint256 amount,\\r\\n        uint32 destinationDomain,\\r\\n        bytes32 mintRecipient,\\r\\n        address burnToken\\r\\n    ) external returns (uint64 nonce);\\r\\n}\\r\\n\",\"keccak256\":\"0x6a1929b87e0dd8d77fd0b201d936d058bb36a8b4f4427b5e96d30c4b6da319e3\",\"license\":\"MIT\"},\"contracts/types/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nstruct Authorization {\\r\\n    uint256 validAfter;\\r\\n    uint256 validBefore;\\r\\n    bytes32 nonce;\\r\\n    uint8 v;\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf475825827ec83f7cdc2cf135ee3d8e335550803f1008e1cd56458e350f56c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161101738038061101783398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a051610f396100de600039600081816060015281816102e1015261038501526000818160b00152818161016901528181610313015261043c0152610f396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630db4fcc414610046578063461178301461005b578063fc0c546a146100ab575b600080fd5b610059610054366004610cc5565b6100d2565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6100db336104ef565b610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f6e6c7947656c61746f52656c6179455243323737310000000000000000000060448201526064015b60405180910390fd5b60006101506105d4565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ef55bec682308a8735602089013560408a01356101ad60808c0160608d01610d49565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff978816600482015296909516602487015260448601939093526064850191909152608484015260a483015260ff1660c4820152608086013560e482015260a086013561010482015261012401600060405180830381600087803b15801561025457600080fd5b505af1158015610268573d6000803e3d6000fd5b5050505061027586610613565b60006102a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc36013589610d6b565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610da5565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fd3504e82876103de8673ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935263ffffffff919091166024830152604482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648201526084016020604051808303816000875af1158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a79190610dc7565b507f3d44caf0be10d5154adcaab3d9a9ae9240d30500ec02594035440fb950226c62828787866040516104dd9493929190610df1565b60405180910390a15050505050505050565b6000466101441480610502575046610118145b1561056e5773ffffffffffffffffffffffffffffffffffffffff82167322dcc39b2ac376862183dd35a1664798dafc7da61480610568575073ffffffffffffffffffffffffffffffffffffffff821673ba4082f4961c8fb76231995c967cd9aa40f321b5145b92915050565b73ffffffffffffffffffffffffffffffffffffffff821673b539068872230f20456cf38ec52ef2f91af4ae491480610568575073ffffffffffffffffffffffffffffffffffffffff8216738598806401a63ddf52473f1b3c55bc9e33e2d73b1492915050565b60006105df336104ef565b6105e857503390565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc360135818111156106c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f47656c61746f52656c6179436f6e74657874455243323737312e5f7472616e7360448201527f66657252656c61794665654361707065643a206d617846656500000000000000606482015260840161013d565b610736367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa4013560601c82367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c73ffffffffffffffffffffffffffffffffffffffff16919061073a565b5050565b8060000361074757505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461079e5761079973ffffffffffffffffffffffffffffffffffffffff841683836107a8565b505050565b6107998282610835565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261079990849061098f565b8047101561089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161013d565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146108f9576040519150601f19603f3d011682016040523d82523d6000602084013e6108fe565b606091505b5050905080610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161013d565b60006109f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a9e9092919063ffffffff16565b9050805160001480610a12575080806020019051810190610a129190610da5565b610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161013d565b6060610aad8484600085610ab5565b949350505050565b606082471015610b47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161013d565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b709190610e96565b60006040518083038185875af1925050503d8060008114610bad576040519150601f19603f3d011682016040523d82523d6000602084013e610bb2565b606091505b5091509150610bc387838387610bce565b979650505050505050565b60608315610c64578251600003610c5d5773ffffffffffffffffffffffffffffffffffffffff85163b610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161013d565b5081610aad565b610aad8383815115610c795781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d9190610eb2565b600060c08284031215610cbf57600080fd5b50919050565b6000806000806000806102008789031215610cdf57600080fd5b863595506020870135945060408701359350606087013563ffffffff81168114610d0857600080fd5b9250610d178860808901610cad565b9150610d27886101408901610cad565b90509295509295509295565b803560ff81168114610d4457600080fd5b919050565b600060208284031215610d5b57600080fd5b610d6482610d33565b9392505050565b81810381811115610568577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610db757600080fd5b81518015158114610d6457600080fd5b600060208284031215610dd957600080fd5b815167ffffffffffffffff81168114610d6457600080fd5b60006101208201905073ffffffffffffffffffffffffffffffffffffffff8616825284602083015263ffffffff841660408301528235606083015260208301356080830152604083013560a083015260ff610e4e60608501610d33565b1660c0830152608083013560e083015260a083013561010083015295945050505050565b60005b83811015610e8d578181015183820152602001610e75565b50506000910152565b60008251610ea8818460208701610e72565b9190910192915050565b6020815260008251806020840152610ed1816040850160208701610e72565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202d7af66619d35392253195b66bf02abf232709cb8ef88840cd685f01803dbf0f64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630db4fcc414610046578063461178301461005b578063fc0c546a146100ab575b600080fd5b610059610054366004610cc5565b6100d2565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6100db336104ef565b610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f6e6c7947656c61746f52656c6179455243323737310000000000000000000060448201526064015b60405180910390fd5b60006101506105d4565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ef55bec682308a8735602089013560408a01356101ad60808c0160608d01610d49565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff978816600482015296909516602487015260448601939093526064850191909152608484015260a483015260ff1660c4820152608086013560e482015260a086013561010482015261012401600060405180830381600087803b15801561025457600080fd5b505af1158015610268573d6000803e3d6000fd5b5050505061027586610613565b60006102a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc36013589610d6b565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610da5565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fd3504e82876103de8673ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935263ffffffff919091166024830152604482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648201526084016020604051808303816000875af1158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a79190610dc7565b507f3d44caf0be10d5154adcaab3d9a9ae9240d30500ec02594035440fb950226c62828787866040516104dd9493929190610df1565b60405180910390a15050505050505050565b6000466101441480610502575046610118145b1561056e5773ffffffffffffffffffffffffffffffffffffffff82167322dcc39b2ac376862183dd35a1664798dafc7da61480610568575073ffffffffffffffffffffffffffffffffffffffff821673ba4082f4961c8fb76231995c967cd9aa40f321b5145b92915050565b73ffffffffffffffffffffffffffffffffffffffff821673b539068872230f20456cf38ec52ef2f91af4ae491480610568575073ffffffffffffffffffffffffffffffffffffffff8216738598806401a63ddf52473f1b3c55bc9e33e2d73b1492915050565b60006105df336104ef565b6105e857503390565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc360135818111156106c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f47656c61746f52656c6179436f6e74657874455243323737312e5f7472616e7360448201527f66657252656c61794665654361707065643a206d617846656500000000000000606482015260840161013d565b610736367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa4013560601c82367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8013560601c73ffffffffffffffffffffffffffffffffffffffff16919061073a565b5050565b8060000361074757505050565b73ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461079e5761079973ffffffffffffffffffffffffffffffffffffffff841683836107a8565b505050565b6107998282610835565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261079990849061098f565b8047101561089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161013d565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146108f9576040519150601f19603f3d011682016040523d82523d6000602084013e6108fe565b606091505b5050905080610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161013d565b60006109f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a9e9092919063ffffffff16565b9050805160001480610a12575080806020019051810190610a129190610da5565b610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161013d565b6060610aad8484600085610ab5565b949350505050565b606082471015610b47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161013d565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b709190610e96565b60006040518083038185875af1925050503d8060008114610bad576040519150601f19603f3d011682016040523d82523d6000602084013e610bb2565b606091505b5091509150610bc387838387610bce565b979650505050505050565b60608315610c64578251600003610c5d5773ffffffffffffffffffffffffffffffffffffffff85163b610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161013d565b5081610aad565b610aad8383815115610c795781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d9190610eb2565b600060c08284031215610cbf57600080fd5b50919050565b6000806000806000806102008789031215610cdf57600080fd5b863595506020870135945060408701359350606087013563ffffffff81168114610d0857600080fd5b9250610d178860808901610cad565b9150610d27886101408901610cad565b90509295509295509295565b803560ff81168114610d4457600080fd5b919050565b600060208284031215610d5b57600080fd5b610d6482610d33565b9392505050565b81810381811115610568577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610db757600080fd5b81518015158114610d6457600080fd5b600060208284031215610dd957600080fd5b815167ffffffffffffffff81168114610d6457600080fd5b60006101208201905073ffffffffffffffffffffffffffffffffffffffff8616825284602083015263ffffffff841660408301528235606083015260208301356080830152604083013560a083015260ff610e4e60608501610d33565b1660c0830152608083013560e083015260a083013561010083015295945050505050565b60005b83811015610e8d578181015183820152602001610e75565b50506000910152565b60008251610ea8818460208701610e72565b9190910192915050565b6020815260008251806020840152610ed1816040850160208701610e72565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202d7af66619d35392253195b66bf02abf232709cb8ef88840cd685f01803dbf0f64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
