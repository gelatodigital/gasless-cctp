{
  "language": "Solidity",
  "sources": {
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GELATO_RELAY, GELATO_RELAY_ZKSYNC} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayBase {\n    modifier onlyGelatoRelay() {\n        require(_isGelatoRelay(msg.sender), \"onlyGelatoRelay\");\n        _;\n    }\n\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\n        return\n            block.chainid == 324 || block.chainid == 280\n                ? _forwarder == GELATO_RELAY_ZKSYNC\n                : _forwarder == GELATO_RELAY;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    GELATO_RELAY_ERC2771,\n    GELATO_RELAY_CONCURRENT_ERC2771,\n    GELATO_RELAY_ERC2771_ZKSYNC,\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC\n} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayERC2771Base {\n    modifier onlyGelatoRelayERC2771() {\n        require(_isGelatoRelayERC2771(msg.sender), \"onlyGelatoRelayERC2771\");\n        _;\n    }\n\n    function _isGelatoRelayERC2771(address _forwarder)\n        internal\n        view\n        returns (bool)\n    {\n        // Use another address on zkSync\n        if (block.chainid == 324 || block.chainid == 280) {\n            return (_forwarder == GELATO_RELAY_ERC2771_ZKSYNC ||\n                _forwarder == GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC);\n        }\n        return (_forwarder == GELATO_RELAY_ERC2771 ||\n            _forwarder == GELATO_RELAY_CONCURRENT_ERC2771);\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\naddress constant GELATO_RELAY_CONCURRENT_ERC2771 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\n\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\n// solhint-disable-next-line max-line-length\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayBase} from \"./base/GelatoRelayBase.sol\";\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\nuint256 constant _FEE_START = 32; // offset: uint256\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\n    assembly {\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\n    assembly {\n        fee := calldataload(sub(calldatasize(), _FEE_START))\n    }\n}\n\n/**\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\n * Expects calldata encoding:\n * abi.encodePacked( _data,\n *                   _feeCollector,\n *                   _feeToken,\n *                   _fee);\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\n * 32bytes start offsets from calldatasize:\n *     feeCollector: - 72 bytes\n *     feeToken: - 52 bytes\n *     fee: - 32 bytes\n */\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\nabstract contract GelatoRelayContext is GelatoRelayBase {\n    using TokenUtils for address;\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFee() internal {\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\n    }\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFee();\n        require(\n            fee <= _maxFee,\n            \"GelatoRelayContext._transferRelayFeeCapped: maxFee\"\n        );\n        _getFeeToken().transfer(_getFeeCollector(), fee);\n    }\n\n    function _getMsgData() internal view returns (bytes calldata) {\n        return\n            _isGelatoRelay(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeToken() internal pure returns (address) {\n        return _getFeeTokenRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFee() internal pure returns (uint256) {\n        return _getFeeRelayContext();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayERC2771Base} from \"./base/GelatoRelayERC2771Base.sol\";\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 92; // offset: address + address + uint256 + address\nuint256 constant _FEE_TOKEN_START = 72; // offset: address + uint256 + address\nuint256 constant _FEE_START = 52; // offset: uint256 + address\nuint256 constant _MSG_SENDER_START = 20; // offset: address\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorRelayContextERC2771()\n    pure\n    returns (address feeCollector)\n{\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\n    assembly {\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\n    assembly {\n        fee := calldataload(sub(calldatasize(), _FEE_START))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\n    assembly {\n        _msgSender := shr(\n            96,\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\n        )\n    }\n}\n\n/**\n * @dev Context variant with feeCollector, feeToken, fee, _msgSender appended to msg.data\n * Expects calldata encoding:\n    abi.encodePacked(\n        _data,\n        _feeCollector,\n        _feeToken,\n        _fee,\n        _msgSender\n    );\n * Therefore, we're expecting 20 + 20 + 32 + 20 = 92 bytes to be appended to normal msgData\n *     feeCollector: - 92 bytes\n *     feeToken: - 72 bytes\n *     fee: - 52 bytes\n *     _msgSender: - 20 bytes\n */\n\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\nabstract contract GelatoRelayContextERC2771 is GelatoRelayERC2771Base {\n    using TokenUtils for address;\n\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\n    function _transferRelayFee() internal {\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\n    }\n\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFee();\n        require(\n            fee <= _maxFee,\n            \"GelatoRelayContextERC2771._transferRelayFeeCapped: maxFee\"\n        );\n        _getFeeToken().transfer(_getFeeCollector(), fee);\n    }\n\n    function _getMsgData() internal view virtual returns (bytes calldata) {\n        return\n            _isGelatoRelayERC2771(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    function _getMsgSender() internal view virtual returns (address) {\n        return\n            _isGelatoRelayERC2771(msg.sender)\n                ? _getMsgSenderRelayContextERC2771()\n                : msg.sender;\n    }\n\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorRelayContextERC2771();\n    }\n\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\n    function _getFeeToken() internal pure returns (address) {\n        return _getFeeTokenRelayContextERC2771();\n    }\n\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\n    function _getFee() internal pure returns (uint256) {\n        return _getFeeRelayContextERC2771();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    modifier onlyERC20(address _token) {\n        require(_token != NATIVE_TOKEN, \"TokenUtils.onlyERC20\");\n        _;\n    }\n\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        _token == NATIVE_TOKEN\n            ? Address.sendValue(payable(_to), _amount)\n            : IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function transferFrom(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal onlyERC20(_token) {\n        if (_amount == 0) return;\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/GelatoCCTPBatchReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {\r\n    GelatoRelayContext\r\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\r\nimport {IMessageTransmitter} from \"./interfaces/IMessageTransmitter.sol\";\r\nimport {IEIP3009Token} from \"./interfaces/IEIP3009Token.sol\";\r\nimport {Authorization} from \"./types/Authorization.sol\";\r\n\r\nstruct Transfer {\r\n    address owner;\r\n    uint256 maxFee;\r\n    bytes message;\r\n    bytes attestation;\r\n    Authorization authorization;\r\n}\r\n\r\ncontract GelatoCCTPBatchReceiver is GelatoRelayContext {\r\n    IEIP3009Token public immutable token;\r\n    IMessageTransmitter public immutable messageTransmitter;\r\n\r\n    constructor(IEIP3009Token _token, IMessageTransmitter _messageTransmitter) {\r\n        token = _token;\r\n        messageTransmitter = _messageTransmitter;\r\n    }\r\n\r\n    function receiveMessages(\r\n        Transfer[] calldata _transfers\r\n    ) external onlyGelatoRelay {\r\n        uint256 fee = _divideCeil(_getFee(), _transfers.length);\r\n\r\n        for (uint256 i = 0; i < _transfers.length; i++) {\r\n            Transfer calldata transfer = _transfers[i];\r\n\r\n            messageTransmitter.receiveMessage(\r\n                transfer.message,\r\n                transfer.attestation\r\n            );\r\n\r\n            token.receiveWithAuthorization(\r\n                transfer.owner,\r\n                address(this),\r\n                transfer.maxFee,\r\n                transfer.authorization.validAfter,\r\n                transfer.authorization.validBefore,\r\n                transfer.authorization.nonce,\r\n                transfer.authorization.v,\r\n                transfer.authorization.r,\r\n                transfer.authorization.s\r\n            );\r\n\r\n            token.transfer(\r\n                transfer.owner,\r\n                transfer.maxFee - fee\r\n            );\r\n        }\r\n\r\n        token.transfer(\r\n            _getFeeCollector(),\r\n            // account for rounding up (avoid dust)\r\n            fee * _transfers.length\r\n        );\r\n    }\r\n\r\n    function _divideCeil(\r\n        uint256 x,\r\n        uint256 y\r\n    ) internal pure returns (uint256) {\r\n        return (x / y) + (x % y == 0 ? 0 : 1);\r\n    }\r\n}\r\n"
    },
    "contracts/GelatoCCTPReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {\r\n    GelatoRelayContext\r\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\r\nimport {IMessageTransmitter} from \"./interfaces/IMessageTransmitter.sol\";\r\nimport {IEIP3009Token} from \"./interfaces/IEIP3009Token.sol\";\r\nimport {Authorization} from \"./types/Authorization.sol\";\r\n\r\ncontract GelatoCCTPReceiver is GelatoRelayContext {\r\n    IEIP3009Token public immutable token;\r\n    IMessageTransmitter public immutable messageTransmitter;\r\n\r\n    constructor(IEIP3009Token _token, IMessageTransmitter _messageTransmitter) {\r\n        token = _token;\r\n        messageTransmitter = _messageTransmitter;\r\n    }\r\n\r\n    function receiveMessage(\r\n        address _owner,\r\n        uint256 _maxFee,\r\n        bytes calldata _message,\r\n        bytes calldata _attestation,\r\n        Authorization calldata _authorization\r\n    ) external onlyGelatoRelay {\r\n        messageTransmitter.receiveMessage(_message, _attestation);\r\n\r\n        token.receiveWithAuthorization(\r\n            _owner,\r\n            address(this),\r\n            _maxFee,\r\n            _authorization.validAfter,\r\n            _authorization.validBefore,\r\n            _authorization.nonce,\r\n            _authorization.v,\r\n            _authorization.r,\r\n            _authorization.s\r\n        );\r\n\r\n        _transferRelayFee();\r\n\r\n        uint256 remaining = _maxFee - _getFee();\r\n        token.transfer(_owner, remaining);\r\n    }\r\n}\r\n"
    },
    "contracts/GelatoCCTPSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {\r\n    GelatoRelayContextERC2771\r\n} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\";\r\nimport {ITokenMessenger} from \"./interfaces/ITokenMessenger.sol\";\r\nimport {IEIP3009Token} from \"./interfaces/IEIP3009Token.sol\";\r\nimport {Authorization} from \"./types/Authorization.sol\";\r\n\r\ncontract GelatoCCTPSender is GelatoRelayContextERC2771 {\r\n    IEIP3009Token public immutable token;\r\n    ITokenMessenger public immutable tokenMessenger;\r\n\r\n    event DepositForBurn(\r\n        address owner,\r\n        uint256 maxFee,\r\n        uint32 domain,\r\n        Authorization authorization\r\n    );\r\n\r\n    constructor(IEIP3009Token _token, ITokenMessenger _tokenMessenger) {\r\n        token = _token;\r\n        tokenMessenger = _tokenMessenger;\r\n    }\r\n\r\n    function depositForBurn(\r\n        uint256 _value,\r\n        uint256 _srcMaxFee,\r\n        uint256 _dstMaxFee,\r\n        uint32 _dstDomain,\r\n        Authorization calldata _srcAuthorization,\r\n        Authorization calldata _dstAuthorization\r\n    ) external onlyGelatoRelayERC2771 {\r\n        address owner = _getMsgSender();\r\n\r\n        token.receiveWithAuthorization(\r\n            owner,\r\n            address(this),\r\n            _value,\r\n            _srcAuthorization.validAfter,\r\n            _srcAuthorization.validBefore,\r\n            _srcAuthorization.nonce,\r\n            _srcAuthorization.v,\r\n            _srcAuthorization.r,\r\n            _srcAuthorization.s\r\n        );\r\n\r\n        _transferRelayFeeCapped(_srcMaxFee);\r\n\r\n        uint256 remaining = _value - _getFee();\r\n        token.approve(address(tokenMessenger), remaining);\r\n\r\n        tokenMessenger.depositForBurn(\r\n            remaining,\r\n            _dstDomain,\r\n            _addressToBytes32(owner),\r\n            address(token)\r\n        );\r\n\r\n        emit DepositForBurn(\r\n            owner,\r\n            _dstMaxFee,\r\n            _dstDomain,\r\n            _dstAuthorization\r\n        );\r\n    }\r\n\r\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(addr)));\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IEIP3009Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IEIP3009Token is IERC20 {\r\n    function receiveWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IMessageTransmitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\ninterface IMessageTransmitter {\r\n    function receiveMessage(\r\n        bytes calldata message,\r\n        bytes calldata attestation\r\n    ) external returns (bool success);\r\n}\r\n"
    },
    "contracts/interfaces/ITokenMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\ninterface ITokenMessenger {\r\n    function depositForBurn(\r\n        uint256 amount,\r\n        uint32 destinationDomain,\r\n        bytes32 mintRecipient,\r\n        address burnToken\r\n    ) external returns (uint64 nonce);\r\n}\r\n"
    },
    "contracts/types/Authorization.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nstruct Authorization {\r\n    uint256 validAfter;\r\n    uint256 validBefore;\r\n    bytes32 nonce;\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
